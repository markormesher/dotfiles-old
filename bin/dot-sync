#!/usr/bin/env bash
set -euo pipefail

# sanity-check: is dotfiles in the right place?
if [ ! -d "${HOME}/dotfiles" ]; then
  echo "ERROR: ${HOME}/dotfiles does not exist"
  exit 1
fi

cd "${HOME}/dotfiles"
source ./bin/common-functions.sh

print_info "Clearing old sandbox directory"
mkdir -p .sandbox
rm -rf .sandbox/*

print_info "Setting up symlinks"
find "${HOME}/dotfiles" -iname "*.symlink" | while read -r file; do
  if ! file_matches_host_tags "${file}"; then
    continue
  fi

  link=$( ( ( grep " dot-link-to" || : ) | cut -d ' ' -f 3 | sed "s#{HOME}#${HOME}#g" ) < "${file}" )
  if [ -z "${link}" ]; then
    print_error "No 'dot-link-to' found for ${file}"
    exit 1
  fi

  sandbox_file="${HOME}/dotfiles/.sandbox/$( ( md5sum | cut -d ' ' -f 1 ) < "${file}" )"
  ( grep -v " dot-link-to " | grep -v " dot-tags " ) < "${file}" > "${sandbox_file}"

  rm "${link}" 2> /dev/null || :
  mkdir -p "$(dirname "${link}")"
  ln -s "${sandbox_file}" "${link}"
  print_debug "${link} -> ${sandbox_file}"
done

print_info "Adding source scripts to bootstrapper"
echo "" > .bootstrap
find "${HOME}/dotfiles" -iname "*.source" | sort | while read -r file; do
  if ! file_matches_host_tags "${file}"; then
    continue
  fi

  echo "source \"${file}\"" >> .bootstrap
  print_debug "${file}"
done

print_info "Setting up \$PATH"
new_path_list=$(mktemp)
find "${HOME}/dotfiles" -iname "*.path" | while read -r file; do
  if ! file_matches_host_tags "${file}"; then
    continue
  fi

  ( grep -v " dot-tags " ) < "${file}" >> "${new_path_list}"
  print_debug "${file}"
done
new_path=$( ( sed '/^\s*$/d' | sed "s#{HOME}#${HOME}#g" | sort | uniq | awk '{ print length, $0 }' | sort -n -s | cut -d ' ' -f 2- ) < "${new_path_list}" | tr '\n' ':' )
echo "export PATH=${new_path}" >> .bootstrap
rm "${new_path_list}"

print_info "Setting up crontab"
new_crontab="$(mktemp)"
find "${HOME}/dotfiles" -iname "*.cron" | while read -r file; do
  if ! file_matches_host_tags "${file}"; then
    continue
  fi

  ( grep -v " dot-tags " | grep -v '^$' ) < "${file}" >> "${new_crontab}"
  print_debug "${file}"
done
crontab "${new_crontab}"
rm "${new_crontab}"
