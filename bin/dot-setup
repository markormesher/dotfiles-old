#!/usr/bin/env bash
set -euo pipefail
shopt -s expand_aliases

if [ ! -z ${SET_X+x} ]; then
  set -x
fi

# settings
NODE_VERSION=14 # don't forget to look for references for node@VERSION elsewhere
PYTHON_VERSION=3.8.3

# sanity-check: is dotfiles in the right place?
if [ ! -d "${HOME}/dotfiles" ]; then
  echo "ERROR: ${HOME}/dotfiles does not exist"
  exit 1
fi

cd "${HOME}/dotfiles"
source ./bin/common-functions.sh

# sanity check: several bits of this script require that dot-sync has been run
if ! grep -q 'dotfiles/.bootstrap' "${HOME}/.bashrc"; then
  print_error "Looks like dot-sync has not been run yet"
  exit 1
fi

set +u
source ./.bootstrap
set -u

# multi-platform installer
function install_package {
  apt=""
  brew_tap=""
  brew_cask=""
  brew=""

  while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case "${key}" in
      --common)
        apt="$1"
        brew="$1"
        shift
        ;;

      --apt)
        apt="$1"
        shift
        ;;

      --brew-tap)
        brew_tap="$1"
        shift
        ;;

      --brew-cask)
        brew_cask="$1"
        shift
        ;;

      --brew)
        brew="$1"
        shift
        ;;
    esac
  done

  if host_has_tag "os:ubuntu"; then
    if [ -n "${apt}" ]; then
      print_info "Installing ${apt}..."
      if ! dpkg -s "${apt}" &> /dev/null; then
        sudo apt -y -qq install "${apt}"
      fi
    fi
  fi

  if host_has_tag "os:macos"; then
    if [ -n "${brew_tap}" ]; then
      print_info "Tapping ${brew_tap}..."
      HOMEBREW_NO_AUTO_UPDATE=1 brew tap "${brew_tap}"
    fi
    if [ -n "${brew_cask}" ]; then
      print_info "Installing ${brew_cask}..."
      if brew cask info "${brew_cask}" | grep 'Not installed' &> /dev/null; then
        brew cask install "${brew_cask}"
      fi
    fi
    if [ -n "${brew}" ]; then
      print_info "Installing ${brew}..."
      if brew info "${brew}" | grep 'Not installed' &> /dev/null; then
        brew install "${brew}"
      fi
    fi
  fi
}

function ppa_is_added {
  search_str="$1"
  if find /etc/apt/ -name "*.list" -print0 | xargs --null cat | grep '^[[:space:]]*deb' | grep "${search_str}" &> /dev/null; then
    return 0
  else
    return 1
  fi
}

# obtain root powers
print_info "Checking for sudo..."
if ! command -v sudo > /dev/null; then
  print_error "sudo is not installed"
  exit 1
fi

print_info "Elevating to root..."
sudo -v

# set sensible OS defaults
print_info "Setting OS defaults..."

if host_has_tag "os:macos"; then
  # always open everything in Finder's list view
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  # show the ${HOME}/Library folder
  chflags nohidden "${HOME}/Library"

  # set standby delay to 24 hours (default is 1 hour)
  sudo pmset -a standbydelay 86400

  # disable the sound effects on boot
  sudo nvram SystemAudioVolume=" "

  # set sidebar icon size to medium
  defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

  # expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # expand print panel by default
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # automatically quit printer app once the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # disable Resume system-wide
  defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

  # disable automatic termination of inactive apps
  defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

  # set Help Viewer windows to non-floating mode
  defaults write com.apple.helpviewer DevMode -bool true

  # reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

  # restart automatically if the computer freezes
  sudo systemsetup -setrestartfreeze on

  # never go into computer sleep mode
  sudo systemsetup -setcomputersleep Off > /dev/null

  # disable Notification Center and remove the menu bar icon
  launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

  # disable automatic capitalization as it's annoying when typing code
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # disable smart dashes as they're annoying when typing code
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # disable automatic period substitution as it's annoying when typing code
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # disable smart quotes as they're annoying when typing code
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

  # disable auto-correct
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
fi

# update package registries
if host_has_tag "os:ubuntu"; then

  # neovim
  if ! apt-cache search --names-only '^neovim$' | grep neovim > /dev/null; then
    sudo add-apt-repository -y ppa:neovim-ppa/stable
  fi

  # syncthing
  if host_has_tag "apps:syncthing"; then
    if ! apt-key adv --list-public-keys 2> /dev/null | grep syncthing > /dev/null; then
      curl -s https://syncthing.net/release-key.txt | sudo apt-key add - > /dev/null
    fi
    if ! ppa_is_added syncthing; then
      echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list > /dev/null
    fi
  fi

  # web server
  if host_has_tag "apps:webserver"; then
    if ! ppa_is_added certbot; then
      sudo add-apt-repository -y ppa:certbot/certbot
    fi
  fi

  # node
  if ! apt-key adv --list-public-keys 2> /dev/null | grep nodesource > /dev/null; then
    curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add - > /dev/null
  fi
  # always re-write the file to pick up updates to $NODE_VERSION
  sudo rm -f /etc/apt/sources.list.d/nodesource.list
  echo "deb https://deb.nodesource.com/node_${NODE_VERSION}.x $(lsb_release -s -c) main" | sudo tee /etc/apt/sources.list.d/nodesource.list > /dev/null
  echo "deb-src https://deb.nodesource.com/node_${NODE_VERSION}.x $(lsb_release -s -c) main" | sudo tee -a /etc/apt/sources.list.d/nodesource.list > /dev/null

  print_info "Running apt update..."
  sudo apt -qq -y update
  print_info "Running apt upgrade..."
  sudo apt -qq -y upgrade
fi

if host_has_tag "os:macos"; then
  print_info "Adding core homebrew taps..."
  install_package --brew-tap homebrew/core
  install_package --brew-tap homebrew/cask
  install_package --brew-tap homebrew/cask-versions
  print_info "Running brew update..."
  brew update
  print_info "Running brew upgrade..."
  brew upgrade
fi

# install os extras
install_package --apt ubuntu-restricted-extras
if host_has_tag "device:desktop" || host_has_tag "device:laptop"; then
  install_package --apt gnome-tweak-tool
fi
install_package --brew coreutils

# install compiler tools and libs
install_package --apt build-essential
install_package --apt libbz2-dev
install_package --apt libffi-dev
install_package --apt libreadline-dev
install_package --apt libssl-dev
install_package --apt zlib1g-dev
install_package --apt zlib1g-dev

# install tools for extra file systems
install_package --apt exfat-fuse
install_package --apt exfat-utils

# install node
install_package --apt nodejs --brew node@${NODE_VERSION}

# install neovim and vim plugins
install_package --common neovim
install_package --common shellcheck

print_info "Setting up vim-plug..."
if [ ! -f "${HOME}/.local/share/nvim/site/autoload/plug.vim" ]; then
  curl -fsSL https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o "${HOME}/.local/share/nvim/site/autoload/plug.vim" --create-dirs
fi
nvim +PlugUpgrade +PlugInstall +PlugUpdate +qall

# install fonts
install_package --brew-tap homebrew/cask-fonts
install_package --apt fonts-lato --brew-cask font-lato
install_package --apt fonts-firacode --brew-cask font-fira-code

# install syncthing
if host_has_tag "apps:syncthing"; then
  install_package --apt syncthing
  user="$(whoami)"
  if host_has_tag "os:ubuntu" && [[ "${user}" != "root" ]] && [[ -d /run/systemd/system ]]; then
    sudo systemctl enable "syncthing@${user}.service"
    sudo systemctl start "syncthing@${user}.service"
  fi
fi

# install backup tools
if host_has_tag "apps:borg"; then
  install_package --apt borgbackup
  install_package --apt rclone
fi

# install photo tools
if host_has_tag "apps:photos"; then
  install_package --common exiftool
  install_package --common exiv2
fi

# install video tools
if host_has_tag "apps:videos"; then
  install_package --common ffmpeg
fi

# install gnupg
if host_has_tag "os:macos"; then
  print_info "Setting up GNUPG..."
  brew unlink gnupg && brew link --overwrite gnupg
  gsed -i '/^pinentry-program/d' "${HOME}/.gnupg/gpg-agent.conf"
  echo "pinentry-program /usr/local/bin/pinentry-mac" >> "${HOME}/.gnupg/gpg-agent.conf"
fi

# install webserver packages
if host_has_tag "apps:webserver"; then
  install_package --apt certbot
  install_package --apt python-certbot-nginx
  install_package --apt nginx
  install_package --apt fail2ban
  install_package --apt apache2-utils
fi

# install and setup fail2ban
if host_has_tag "apps:fail2ban"; then
  sudo mkdir -p /etc/fail2ban
  sudo rm -f /etc/fail2ban/jail.local
  sudo ln -s "${HOME}/dotfiles/fail2ban/jail.local" /etc/fail2ban/jail.local

  sudo mkdir -p /etc/fail2ban/filter.d
  sudo rm -f /etc/fail2ban/filter.d/nginx-http-auth.conf
  sudo ln -s "${HOME}/dotfiles/fail2ban/nginx-http-auth.conf" /etc/fail2ban/filter.d/nginx-http-auth.conf

  sudo systemctl enable fail2ban
  sudo systemctl restart fail2ban
fi

# install global NPM packages
print_info "Installing global NPM packages..."
source ./node/020.node-package-path.source
original_npm install -g npm yarn
npm install -g \
  yarn \
  typescript \
  prettier \
  eslint \
  @typescript-eslint/parser \
  @typescript-eslint/typescript-estree \
  @typescript-eslint/eslint-plugin \
  javascript-typescript-langserver \
  js-beautify \
  neovim \
  bash-language-server \
  markdownlint

# install global Python packages
print_info "Installing global Python packages..."
source ./python/pyenv.source
pip -q install --upgrade pip
pip -q install --upgrade pynvim neovim-remote

# install SDKMAN (see also the sdk/sdk-manager.source file)
if host_has_tag "apps:sdkman"; then
  print_info "Installing SDKMAN..."
  if [ ! -d "${HOME}/.sdkman" ]; then
    sdkman_installer=$(mktemp)
    curl -fsSL "https://get.sdkman.io" -o "${sdkman_installer}"
    bash "${sdkman_installer}"
    rm "${sdkman_installer}"
  fi
fi

# clean up packages
if host_has_tag "os:ubuntu"; then
  print_info "Running apt autoremove..."
  sudo apt -qq -y autoremove
  print_info "Running apt autoclean..."
  sudo apt -qq -y autoclean
fi

if host_has_tag "os:macos"; then
  print_info "Running brew cleanup..."
  brew cleanup
fi

print_info "Done!"
