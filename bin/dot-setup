#!/usr/bin/env bash
set -euo pipefail

# sanity-check: is dotfiles in the right place?
if [ ! -d "${HOME}/dotfiles" ]; then
  echo "ERROR: ${HOME}/dotfiles does not exist"
  exit 1
fi

cd "${HOME}/dotfiles"
source "bin/common-functions.sh"

if ! grep -q 'dotfiles/.bootstrap' "$HOME/.bashrc"; then
  print_error "Looks like dot-sync has not been run yet"
  exit 1
fi

# obtain root powers

print_info "Checking for sudo..."
if ! command -v sudo > /dev/null; then
  print_error "sudo is not installed"
  exit 1
fi

print_info "Elevating to root..."
sudo -v

# set sensible OS defaults

print_info "Setting OS defaults..."

if host_has_tag "os:macos"; then
  # always open everything in Finder's list view
  defaults write com.apple.Finder FXPreferredViewStyle Nlsv

  # show the ~/Library folder
  chflags nohidden ~/Library

  # set standby delay to 24 hours (default is 1 hour)
  sudo pmset -a standbydelay 86400

  # disable the sound effects on boot
  sudo nvram SystemAudioVolume=" "

  # set sidebar icon size to medium
  defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

  # expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # expand print panel by default
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # automatically quit printer app once the print jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # disable Resume system-wide
  defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

  # disable automatic termination of inactive apps
  defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

  # set Help Viewer windows to non-floating mode
  defaults write com.apple.helpviewer DevMode -bool true

  # reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

  # restart automatically if the computer freezes
  sudo systemsetup -setrestartfreeze on

  # never go into computer sleep mode
  sudo systemsetup -setcomputersleep Off > /dev/null

  # disable Notification Center and remove the menu bar icon
  launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

  # disable automatic capitalization as it's annoying when typing code
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # disable smart dashes as they're annoying when typing code
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # disable automatic period substitution as it's annoying when typing code
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # disable smart quotes as they're annoying when typing code
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

  # disable auto-correct
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
fi

# update package registries

if host_has_tag "os:ubuntu"; then
  print_info "Adding repositories..."

  # universe and multiverse packages
  if ! find /etc/apt/ -name *.list | xargs cat | grep '^[[:space:]]*deb' | grep universe > /dev/null; then
    sudo add-apt-repository -y universe
  fi
  if ! find /etc/apt/ -name *.list | xargs cat | grep '^[[:space:]]*deb' | grep multiverse > /dev/null; then
    sudo add-apt-repository -y multiverse
  fi

  # neovim
  if ! apt-cache search --names-only '^neovim$' | grep neovim > /dev/null; then
    sudo add-apt-repository -y ppa:neovim-ppa/stable
  fi

  # syncthing
  if host_has_tag "apps:syncthing"; then
    if ! apt-key adv --list-public-keys 2> /dev/null | grep syncthing > /dev/null; then
      curl -s https://syncthing.net/release-key.txt | sudo apt-key add - > /dev/null
    fi
    if [ ! -d /etc/apt/sources.list.d/syncthing.list ]; then
      echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list > /dev/null
    fi
  fi

  print_info "Running apt update..."
  sudo apt -qq -y update
  print_info "Running apt upgrade..."
  sudo apt -qq -y upgrade
fi

if host_has_tag "os:macos"; then
  print_info "Running brew update..."
  brew update
  print_info "Running brew upgrade..."
  brew upgrade
fi

# install OS packages

common_packages=(
  # git
  git
  git-lfs

  # network tools
  nmap
  wget
  curl

  # terminal tools
  htop
  tmux
  pv

  # photo and video tools
  exiftool
  exiv2
  ffmpeg

  # compression
  gzip
  zip
  unzip

  # better vim
  neovim

  # misc utils
  colordiff
  jq

  # gnupg
  gnupg
)

ubuntu_packages=(
  # all extras
  ubuntu-restricted-extras

  # network tools
  net-tools
  netcat

  # compression
  xz-utils

  # ui tweaking
  gnome-tweak-tool

  # file systems
  exfat-fuse
  exfat-utils

  # fonts
  fonts-lato

  # syncthing
  syncthing
)

brew_packages=(
  # network tools
  netcat

  # compression
  xz
)

brew_taps=(
  homebrew/cask-fonts
)

brew_cask_packages=(
  # fonts
  font-lato
)

if host_has_tag "os:ubuntu"; then
  for item in "${common_packages[@]}" "${ubuntu_packages[@]}"; do
    print_info "Installing ${item}..."
    dpkg -s "${item}" > /dev/null 2>&1 || sudo apt -y -qq install "${item}"
  done
fi

if host_has_tag "os:macos"; then
  for item in "${brew_taps[@]}"; do
    print_info "Tapping ${item}..."
    brew tap "${item}"
  done
  for item in "${common_packages[@]}" "${brew_packages[@]}"; do
    print_info "Installing ${item}..."
    brew info "${item}" | grep --quiet 'Not installed' && brew install "${item}"
  done
  for item in "${brew_cask_packages[@]}"; do
    print_info "Installing ${item}..."
    brew cask info "${item}" | grep --quiet 'Not installed' && brew cask install "${item}"
  done
fi

# clean up packages

if host_has_tag "os:ubuntu"; then
  print_info "Running apt autoremove..."
  sudo apt -qq -y autoremove
  print_info "Running apt autoclean..."
  sudo apt -qq -y autoclean
fi

if host_has_tag "os:macos"; then
  print_info "Running brew cleanup..."
  brew cleanup
fi

# install Node Version Manager and Node versions
print_info "Installing Node Version Manager..."
if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm" && \. "$NVM_DIR/nvm.sh"
else
  set +u
  export NVM_DIR="$HOME/.nvm" && (
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1))
  ) && \. "$NVM_DIR/nvm.sh"
  set -u
fi

print_info "Installing Node versions"
set +u
nvm install 8
nvm install 10
nvm install 12
nvm use 10
nvm alias default 10
set -u

# install global NPM packages
print_info "Installing global NPM packages..."
npm install -g \
  yarn \
  typescript \
  prettier \
  eslint \
  @typescript-eslint/parser \
  @typescript-eslint/typescript-estree \
  @typescript-eslint/eslint-plugin \
  javascript-typescript-langserver \
  js-beautify \
  fd-find \
  neovim

# install docker
if host_has_tag "appgroup=docker"; then
  # docker
  print_info "Installing docker..."
  if ! command -v docker > /dev/null; then
    if host_has_tag "os:ubuntu"; then
      docker_installer=$(mktemp)
      curl -fsSL https://get.docker.com -o "${docker_installer}"
      sudo sh $docker_installer
      rm $docker_installer
      if [[ -d /run/systemd/system ]]; then
        sudo systemctl enable docker
        sudo systemctl start docker
      fi
      sudo usermod -aG docker $USER
    fi

    if host_has_tag "os:macos"; then
      print_warn "Docker must be manually installed on MacOS - downloading the installer now..."
      wget -P "${HOME}/Downloads/" https://download.docker.com/mac/stable/Docker.dmg
    fi
  fi

  # docker compose
  print_info "Installing docker compose..."
  if ! command -v docker-compose > /dev/null; then
    sudo curl -fsSL "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  fi
fi

# install SDKMAN (see also the sdk/sdk-manager.source file)
print_info "Installing SDKMAN..."
if command -v sdk > /dev/null; then
  print_info "SDKMAN is already installed"
else
  sdkman_installer=$(mktemp)
  curl -fsSL "https://get.sdkman.io" -o $sdkman_installer
  bash $sdkman_installer
  rm $sdkman_installer
fi

# set up git lfs
print_info "Setting up Git LFS..."
git lfs install

# set up vim-plug
print_info "Setting up vim-plug..."
curl -qfL https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
nvim +PlugUpgrade +PlugInstall +PlugUpdate +qall

# set up gnupg
if host_has_tag "os:macos"; then
  print_info "Setting up GNUPG..."
  brew unlink gnupg && brew link --overwrite gnupg
  gsed -i '/^pinentry-program/d' ~/.gnupg/gpg-agent.conf
  echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
fi

# set up syncthing
if host_has_tag "os:ubuntu" && host_has_tag "apps:syncthing" && [[ "${user}" != "root" ]]; then
  user="$(whoami)"
  if [[ -d /run/systemd/system ]]; then
    sudo systemctl enable "syncthing@${user}.service"
    sudo systemctl start "syncthing@${user}.service"
  fi
fi

print_info "Done!"
