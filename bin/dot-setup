#!/usr/bin/env bash
set -euo pipefail

function print_info {
  echo -e '\e[36m[ dotfiles ][ info ]\e[0m  '"${1}"
}

function print_error {
  echo -e '\e[31m[ dotfiles ][ error ]\e[0m  '"${1}"
}

# sanity-check: is dotfiles in the right place?

if [ ! -d "$HOME/dotfiles" ]; then
  echo "$HOME/dotfiles does not exist"
  exit 1
fi

cd "$HOME/dotfiles"

# obtain root powers

print_info "Checking for sudo..."
if ! command -v sudo > /dev/null; then
  print_error "sudo is not installed"
  exit 1
fi

print_info "Elevating to root..."
sudo -v

# detect environment

print_info "Detecting environment"

if [[ "$OSTYPE" == *"linux"* ]]; then
  os_release_name="$(cat /etc/os-release | grep '^NAME=')"
  if [[ "${os_release_name}" == *"CentOS"* ]]; then
    print_info "Running on CentOS"
    print_info "Checking for yum..."
    if ! command -v yum > /dev/null; then
      print_error "yum is not installed"
      exit 1
    fi
    os="centos"
  elif [[ "${os_release_name}" == *"Ubuntu"* ]]; then
    print_info "Running on Ubuntu"
    print_info "Checking for apt..."
    if ! command -v apt > /dev/null; then
      print_error "apt is not installed"
      exit 1
    fi
    os="ubuntu"
  else
    print_error "Running on Linix, but not CentOS or Ubuntu"
    exit 1
  fi
elif [[ "${OSTYPE}" == *"darwin"* ]]; then
  print_info "Running on MacOS"
  print_info "Checking for brew..."
  if ! command -v brew > /dev/null; then
    print_info "brew is not installed"
    exit 1
  fi
  os="macos"
else
  print_info "Couldn't detect OS"
  exit 1
fi

# set sensible OS defaults

print_info "Setting OS defaults..."

case "${os}" in
  "centos")
    ;;

  "ubuntu")
    ;;

  "macos")
    # always open everything in Finder's list view
    defaults write com.apple.Finder FXPreferredViewStyle Nlsv

    # show the ~/Library folder
    chflags nohidden ~/Library

    # set standby delay to 24 hours (default is 1 hour)
    sudo pmset -a standbydelay 86400

    # disable the sound effects on boot
    sudo nvram SystemAudioVolume=" "

    # set sidebar icon size to medium
    defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

    # expand save panel by default
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    # expand print panel by default
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

    # save to disk (not to iCloud) by default
    defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

    # automatically quit printer app once the print jobs complete
    defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

    # disable the “Are you sure you want to open this application?” dialog
    defaults write com.apple.LaunchServices LSQuarantine -bool false

    # disable Resume system-wide
    defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

    # disable automatic termination of inactive apps
    defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

    # set Help Viewer windows to non-floating mode
    defaults write com.apple.helpviewer DevMode -bool true

    # reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    # restart automatically if the computer freezes
    sudo systemsetup -setrestartfreeze on

    # never go into computer sleep mode
    sudo systemsetup -setcomputersleep Off > /dev/null

    # disable Notification Center and remove the menu bar icon
    launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null

    # disable automatic capitalization as it's annoying when typing code
    defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

    # disable smart dashes as they're annoying when typing code
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    # disable automatic period substitution as it's annoying when typing code
    defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

    # disable smart quotes as they're annoying when typing code
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # disable auto-correct
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
    ;;
esac

# update package registries

case "${os}" in
  "centos")
    print_info "Installing epel-release..."
    sudo yum -y -q install epel-release
    print_info "Running yum update..."
    sudo yum -y -q update
    print_info "Running yum upgrade..."
    sudo yum -y -q upgrade
    ;;

  "ubuntu")
    print_info "Adding repositories..."
    sudo add-apt-repository -y ppa:neovim-ppa/stable
    print_info "Running apt update..."
    sudo apt -qq -y update
    print_info "Running apt upgrade..."
    sudo apt -qq -y upgrade
    ;;

  "macos")
    print_info "Running brew update..."
    brew update
    print_info "Running brew upgrade..."
    brew upgrade
    ;;
esac

# install OS packages

common_packages=(
  # git
  git
  git-lfs

  # network tools
  nmap
  wget
  curl

  # terminal tools
  htop
  tmux
  tldr

  # photo tools
  exiftool

  # compression
  gzip

  # better vim
  neovim

  # misc utils
  colordiff
  jq

  # gnupg
  gnupg
)

centos_packages=(
  # network tools
  net-tools

  # terminal tools
  which

  # package tools
  yum-utils
)

ubuntu_packages=(
  # network tools
  net-tools
  netcat

  # ui tweaking
  gnome-tweak-tool
)

brew_packages=(
  # network tools
  netcat
)

brew_cask_packages=(
)

if [[ "${os}" == "centos" ]]; then
  for item in "${common_packages[@]}" "${centos_packages[@]}"; do
    print_info "Installing ${item}..."
    rpm -q "${item}" > /dev/null 2>&1 || sudo yum -y -q install "${item}"
  done
fi

if [[ "${os}" == "ubuntu" ]]; then
  for item in "${common_packages[@]}" "${ubuntu_packages[@]}"; do
    print_info "Installing ${item}..."
    dpkg -s "${item}" > /dev/null 2>&1 || sudo apt -y -qq install "${item}"
  done
fi

if [[ "${os}" == "macos" ]]; then
  for item in "${common_packages[@]}" "${brew_packages[@]}"; do
    print_info "Installing ${item}..."
    brew info "${item}" | grep --quiet 'Not installed' && brew install "${item}"
  done
  for item in "${brew_cask_packages[@]}"; do
    print_info "Installing ${item}..."
    brew cask info "${item}" | grep --quiet 'Not installed' && brew cask install "${item}"
  done
fi

# clean up packages

case "${os}" in
  "centos")
    print_info "Running yum remove \$(package-cleanup --leaves)..."
    sudo yum -y -q $(package-cleanup --leaves)
    ;;

  "ubuntu")
    print_info "Running apt autoremove..."
    sudo apt -qq -y autoremove
    print_info "Running apt autoclean..."
    sudo apt -qq -y autoclean
    ;;

  "macos")
    print_info "Running brew cleanup..."
    brew cleanup
    ;;
esac

# install Node Version Manager and Node versions
print_info "Installing Node Version Manager..."
if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm" && \. "$NVM_DIR/nvm.sh"
else
  export NVM_DIR="$HOME/.nvm" && (
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1))
  ) && \. "$NVM_DIR/nvm.sh"
fi

print_info "Installing Node versions"
nvm install 8
nvm install 10
nvm install 12
nvm use 10
nvm alias default 10

# install global NPM packages
print_info "Installing global NPM packages..."
npm install -g \
  typescript \
  prettier \
  eslint \
  @typescript-eslint/parser \
  @typescript-eslint/typescript-estree \
  @typescript-eslint/eslint-plugin \
  javascript-typescript-langserver \
  js-beautify \
  fd-find \
  neovim

# set up git lfs
print_info "Setting up Git LFS..."
git lfs install

# set up vim-plug
print_info "Setting up vim-plug..."
curl -qfLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
vim +PlugUpgrade +PlugInstall +PlugUpdate +qall

# set up gnupg
if [[ "${os}" == "macos" ]]; then
  print_info "Setting up GNUPG..."
  brew unlink gnupg && brew link --overwrite gnupg
  gsed -i '/^pinentry-program/d' ~/.gnupg/gpg-agent.conf
  echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
fi

print_info "Done!"
