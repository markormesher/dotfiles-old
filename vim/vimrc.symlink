" dot-link-to {HOME}/.vimrc

" custom leader key
:let mapleader=","

" indentation (may be overwritten by vim-sleuth)
:set expandtab
:set tabstop=2
:set softtabstop=2
:set shiftwidth=2

" buffer settings
:set hidden " hide buffers when abandoned

" file type settings
autocmd BufRead,BufNewFile *.json set filetype=jsonc

call plug#begin()

" misc vim programs
Plug 'vimwiki/vimwiki'

" snippets and skeletons
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'pgilad/vim-skeletons'

" vim interface
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'kshenoy/vim-signature'

" fzf file search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" generic typing/coding assistance
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
Plug 'ntpeters/vim-better-whitespace'

" TS language support
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'

" auto-complete and language server support
Plug 'neoclide/coc.nvim', { 'branch': 'release', 'do': { -> coc#util#install() } }

" colour schemes
Plug 'dracula/vim', { 'as': 'dracula' }

call plug#end()

" vimwiki settings
let g:vimwiki_global_ext = 0
let g:vimwiki_auto_header = 1
let g:vimwiki_table_mappings = 0
let g:vimwiki_list = [{
\ 'path': '~/vimwiki/',
\ 'syntax': 'markdown',
\ 'ext': '.md',
\ 'auto_diary_index': 1
\ }]

" snippets and skeletons settings
let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let skeletons#autoRegister = 1
let skeletons#skeletonsDir = "~/dotfiles/vim/skeletons"

" NERDTree settings
let NERDTreeShowHidden=1 " always show dot files
let NERDTreeQuitOnOpen=1 " quit NERDTree after opening a file
map <Leader>m :NERDTreeToggle<CR>
map <Leader>n :NERDTreeFind<CR>

" FZF file finder settings
map <Leader>, :FZF<CR>

" closetag settings
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.jsx,*.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.tsx'

" coc settings (more settings in ~/.config/nvim/coc-settings.json)
let g:coc_global_extensions = [
\ 'coc-tsserver',
\ 'coc-html',
\ 'coc-css',
\ 'coc-json',
\ 'coc-yaml',
\ 'coc-eslint',
\ 'coc-prettier',
\ 'coc-java',
\ 'coc-sh',
\ 'coc-diagnostic'
\ ]
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
nmap <Leader>gt :<C-u>CocList outline<cr>
map <leader>f :CocFix<CR>

" formatters
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css

" colour scheme + edits
let g:dracula_colorterm = 0
:silent! colorscheme dracula

" colour scheme overrides
highlight CocErrorSign ctermfg=DarkRed
highlight CocErrorVirtualText ctermfg=DarkRed
highlight CocErrorHighlight cterm=underline

highlight CocWarningSign ctermfg=DarkYellow
highlight CocWarningVirtualText ctermfg=DarkYellow
highlight CocWarningHighlight cterm=underline

highlight CocInfoSign ctermfg=Cyan
highlight CocInfoVirtualText ctermfg=Cyan
highlight CocInfoHighlight cterm=underline

highlight CocHintSign ctermfg=Cyan
highlight CocHintVirtualText ctermfg=Cyan
highlight CocInfoHighlight cterm=underline

augroup BgHighlight
  autocmd!
  autocmd BufWinEnter * set relativenumber
  autocmd WinEnter * set relativenumber
  autocmd BufWinEnter * set cul
  autocmd WinEnter * set cul
  autocmd BufWinLeave * set norelativenumber
  autocmd WinLeave * set norelativenumber
  autocmd BufWinLeave * set nocul
  autocmd WinLeave * set nocul
augroup END
