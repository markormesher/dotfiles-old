" dot-link-to {HOME}/.vimrc

set nocompatible
syntax on

" custom leader key
let mapleader=","

" dont re-draw during macros
set lazyredraw

" highlight changes/replacements using `s` as they're typed (neovim only)
set inccommand=nosplit

" make searches without caps case-insensitive
set smartcase
set ignorecase

" keep undo history even after exiting
set undofile

" default tab size of 2 spaces (may be overwritten by vim-sleuth)
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" hide buffers when abandoned
set hidden

" show current line number and relative numbers on other lines
set number relativenumber

" always show the sign column to avoid janky changes when signs appear/disappear
set signcolumn=yes

" keep the cursor X lines away from the top and bottom of the window (except
" for the start and end of files)
set scrolloff=10

" set file types
filetype plugin on
autocmd BufRead,BufNewFile *.json set filetype=jsonc

call plug#begin()

" vimwiki plugin
Plug 'vimwiki/vimwiki'

" snippets and skeletons
Plug 'SirVer/ultisnips' " snippet engine
Plug 'honza/vim-snippets' " snippet source
Plug 'pgilad/vim-skeletons' " automatic skeleton for file types

" vim interface
Plug 'scrooloose/nerdtree' " file browser
Plug 'vim-airline/vim-airline' " status line
Plug 'kshenoy/vim-signature' " show marks in the gutter
Plug 'camspiers/lens.vim' " resize windows automatically
Plug 'ap/vim-css-color' " highlight css colour names and hex codes

" fzf file search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" generic typing/coding assistance
Plug 'tpope/vim-commentary' " gcc to (un-)comment a line, gc to (un-)comment a visual selection
Plug 'tpope/vim-sleuth' " detect the indentation style for a file and adjust settings accordingly
Plug 'alvan/vim-closetag' " auto close XML/HTML tags
Plug 'jiangmiao/auto-pairs' " pairing for quotes, brackets, etc.
Plug 'ntpeters/vim-better-whitespace' " highlight trailing whitespace and provides :StripWhitespace helper
Plug 'unblevable/quick-scope' " highlight good options for f and F navigation within a line

" TS language support
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'

" auto-complete and language server support
Plug 'neoclide/coc.nvim', { 'branch': 'release', 'do': { -> coc#util#install() } }

" general UI
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'blueyed/vim-diminactive' " dim inactive vim windows

call plug#end()

" vimwiki settings
let g:vimwiki_global_ext = 0
let g:vimwiki_auto_header = 1
let g:vimwiki_table_mappings = 0
let g:vimwiki_list = [{
\ 'path': '~/vimwiki/',
\ 'syntax': 'markdown',
\ 'ext': '.md',
\ 'auto_diary_index': 1
\ }]

" snippets and skeletons settings
let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let skeletons#autoRegister = 1
let skeletons#skeletonsDir = "~/dotfiles/vim/skeletons"

" NERDTree settings
let NERDTreeShowHidden=1 " always show dot files
let NERDTreeQuitOnOpen=1 " quit NERDTree after opening a file
map <Leader>m :NERDTreeToggle<CR>
map <Leader>n :NERDTreeFind<CR>

" FZF file finder settings
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
map <Leader>, :FZF<CR>

" closetag settings
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.jsx,*.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.tsx'

" coc settings (more settings in ~/.config/nvim/coc-settings.json)
let g:coc_global_extensions = [
\ 'coc-tsserver',
\ 'coc-html',
\ 'coc-css',
\ 'coc-json',
\ 'coc-yaml',
\ 'coc-eslint',
\ 'coc-prettier',
\ 'coc-java',
\ 'coc-sh',
\ 'coc-diagnostic'
\ ]
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <Leader>rn <Plug>(coc-rename)
nmap <Leader>gt :<C-u>CocList outline<cr>
map <Leader>f :CocFix<CR>

" formatters
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css

" auto-format on exit
:autocmd BufWritePost * :StripWhitespace

" colour scheme + edits
let g:dracula_colorterm = 0
:silent! colorscheme dracula

highlight QuickScopePrimary cterm=underline
highlight QuickScopeSecondary cterm=underline,italic

highlight CocErrorSign ctermfg=DarkRed
highlight CocErrorVirtualText ctermfg=DarkRed
highlight CocErrorHighlight cterm=underline

highlight CocWarningSign ctermfg=DarkYellow
highlight CocWarningVirtualText ctermfg=DarkYellow
highlight CocWarningHighlight cterm=underline

highlight CocInfoSign ctermfg=Cyan
highlight CocInfoVirtualText ctermfg=Cyan
highlight CocInfoHighlight cterm=underline

highlight CocHintSign ctermfg=Cyan
highlight CocHintVirtualText ctermfg=Cyan
highlight CocInfoHighlight cterm=underline
